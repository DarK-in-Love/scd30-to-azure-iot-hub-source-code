import time

 

from azure.iot.device import IoTHubDeviceClient, Message

 

from scd30_i2c import SCD30

 

scd30 = SCD30()

 

scd30.set_measurement_interval(2)
scd30.start_periodic_measurement()

 

time.sleep(2)

 

CONNECTION_STRING = "HostName=Luchtkwaliteit.azure-devices.net;DeviceId=Raspberry;SharedAccessKey=g4xN7ZMvDUXPKYLI9QJtv8/4fWw1hp328U/CGfuA880="

 

# Define the JSON message to send to IoT Hub.
Temp = "temp"
Humi = "humi"
CO2  = "CO2"

 

MSG_TXT = '{{"Temp": {Temp:.2f},"Humi": {Humi:.2f},"CO2":{CO2:.2f}}}'

 

def iothub_client_init():
    # Create an IoT Hub client
    client = IoTHubDeviceClient.create_from_connection_string(CONNECTION_STRING)
    return client

 

def iothub_client_telemetry_sample_run():

 

    try:
        client = iothub_client_init()
        print ( "IoT Hub device sending periodic messages, press Ctrl-C to exit" )
        while True:
            if scd30.get_data_ready():
                m = scd30.read_measurement()
                if m is not None:
                    print(f"CO2: {m[0]:.2f}ppm, temp: {m[1]:.2f}'C, rh: {m[2]:.2f}%")
                time.sleep(5)
            else:
                time.sleep(0.2) 
            
        
            # Build the message with simulated telemetry values.
            Temp = m[1]
            Humi = m[2]
            CO2  = m[0]
            msg_txt_formatted = MSG_TXT.format(Temp=Temp, Humi=Humi, CO2=CO2)
            message = Message(msg_txt_formatted)

 

            # Send the message.
            print( "Sending message: {}".format(message) )
            client.send_message(message)
            print ( "Message successfully sent" )
            time.sleep(3)

 

    except KeyboardInterrupt:
        print ( "IoTHubClient sample stopped" )

 

if __name__ == '__main__':
    print ( "IoT Hub Quickstart #1 - Simulated device" )
    print ( "Press Ctrl-C to exit" )
    iothub_client_telemetry_sample_run() 
